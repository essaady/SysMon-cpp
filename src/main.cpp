#include "CpuMonitor.h"
#include <iostream>
#include <thread>
#include <chrono>
#include <csignal>
#include <limits>

using namespace std;

// Variable globale pour contr√¥ler l'arr√™t du programme
volatile bool keepRunning = true;

// Gestionnaire de signal pour arr√™t propre (Ctrl+C)
void signalHandler(int signal) {
    cout << "\n\nArr√™t du programme demand√©..." << endl;
    keepRunning = false;
}

// Fonction pour effacer l'√©cran de mani√®re portable
void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// Fonction pour afficher le menu avec style
void displayMenu() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë       CPU MONITOR MENU        ‚ïë" << endl;
    cout << "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£" << endl;
    cout << "‚ïë 1. Surveillance temps r√©el    ‚ïë" << endl;
    cout << "‚ïë 2. Informations CPU           ‚ïë" << endl;
    cout << "‚ïë 3. Mesure unique              ‚ïë" << endl;
    cout << "‚ïë 4. Changer intervalle         ‚ïë" << endl;
    cout << "‚ïë 5. Exporter donn√©es           ‚ïë" << endl;
    cout << "‚ïë 6. Historique utilisation     ‚ïë" << endl;
    cout << "‚ïë 7. Informations syst√®me       ‚ïë" << endl;
    cout << "‚ïë 8. Test de charge             ‚ïë" << endl;
    cout << "‚ïë 9. D√©monstration POO          ‚ïë" << endl;
    cout << "‚ïë 0. Quitter                    ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
    cout << "Choix: ";
}

// Fonction de surveillance en temps r√©el am√©lior√©e
void realTimeMonitoring(CpuMonitor& monitor) {
    cout << "\nD√©marrage de la surveillance temps r√©el..." << endl;
    cout << "Appuyez sur Ctrl+C pour arr√™ter\n" << endl;
    
    monitor.startMonitoring();
    
    // Attendre un peu pour que le monitoring se stabilise
    this_thread::sleep_for(chrono::milliseconds(500));

    int refreshCount = 0;
    auto startTime = chrono::steady_clock::now();

    while (keepRunning && monitor.getMonitoringStatus()) {
        clearScreen();
        
        cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
        cout << "‚ïë              CPU MONITOR - TEMPS R√âEL          ‚ïë" << endl;
        cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;
        cout << endl;

        // Afficher l'utilisation format√©e
        cout << monitor.formatUsageString() << endl;
        cout << endl;

        // Afficher timestamp et informations additionnelles
        auto now = chrono::system_clock::now();
        time_t time_now = chrono::system_clock::to_time_t(now);
        cout << "‚è∞ Derni√®re mise √† jour: " << ctime(&time_now);
        
        // Afficher dur√©e de surveillance
        auto elapsed = chrono::steady_clock::now() - startTime;
        auto seconds = chrono::duration_cast<chrono::seconds>(elapsed).count();
        cout << "üìä Dur√©e surveillance: " << seconds << "s" << endl;
        cout << "üîÑ Rafra√Æchissements: " << ++refreshCount << endl;
        cout << "‚öôÔ∏è  Intervalle: " << monitor.getUpdateInterval() << "s" << endl;
        
        cout << "\n" << string(50, '‚îÄ') << endl;
        cout << "Appuyez sur Ctrl+C pour arr√™ter la surveillance" << endl;

        this_thread::sleep_for(chrono::seconds(monitor.getUpdateInterval()));
    }

    monitor.stopMonitoring();
    cout << "\nSurveillance termin√©e." << endl;
}

// Test de charge CPU pour d√©monstration
void stressTest(int duration) {
    cout << "\nüî• Test de charge CPU pendant " << duration << " secondes..." << endl;
    cout << "Ceci va augmenter artificiellement l'utilisation CPU\n" << endl;
    
    auto endTime = chrono::steady_clock::now() + chrono::seconds(duration);
    vector<thread> stressThreads;
    
    // Cr√©er des threads pour charger le CPU
    unsigned int numThreads = thread::hardware_concurrency();
    for (unsigned int i = 0; i < numThreads; ++i) {
        stressThreads.emplace_back([endTime]() {
            volatile long long counter = 0;
            while (chrono::steady_clock::now() < endTime) {
                ++counter; // Op√©ration simple pour charger le CPU
            }
        });
    }
    
    // Attendre que tous les threads terminent
    for (auto& t : stressThreads) {
        t.join();
    }
    
    cout << "‚úÖ Test de charge termin√©!" << endl;
}

// D√©monstration des concepts POO am√©lior√©e
void demonstrateOOP() {
    cout << "\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë          D√âMONSTRATION CONCEPTS POO           ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    cout << "\n1Ô∏è‚É£  CONSTRUCTEURS:" << endl;
    cout << "   ‚Ä¢ Cr√©ation de deux objets CpuMonitor" << endl;
    CpuMonitor monitor1;              // Constructeur par d√©faut
    CpuMonitor monitor2(3);           // Constructeur avec param√®tre

    cout << "\n2Ô∏è‚É£  ENCAPSULATION:" << endl;
    cout << "   ‚Ä¢ Acc√®s aux donn√©es via getters/setters" << endl;
    cout << "   ‚Ä¢ Intervalle monitor1: " << monitor1.getUpdateInterval() << "s" << endl;
    cout << "   ‚Ä¢ Intervalle monitor2: " << monitor2.getUpdateInterval() << "s" << endl;

    monitor1.setUpdateInterval(5);
    cout << "   ‚Ä¢ Nouvel intervalle monitor1: " << monitor1.getUpdateInterval() << "s" << endl;

    cout << "\n3Ô∏è‚É£  ABSTRACTION:" << endl;
    cout << "   ‚Ä¢ Utilisation de m√©thodes publiques simples" << endl;
    cout << "   ‚Ä¢ Les d√©tails d'impl√©mentation sont cach√©s" << endl;
    
    monitor1.updateCpuUsage();
    cout << "   ‚Ä¢ Utilisation CPU mesur√©e: " << monitor1.getCurrentUsage() << "%" << endl;
    cout << "   ‚Ä¢ Affichage format√©: " << monitor1.formatUsageString() << endl;

    cout << "\n4Ô∏è‚É£  M√âTHODES STATIQUES:" << endl;
    cout << "   ‚Ä¢ Acc√®s sans instanciation d'objet" << endl;
    cout << CpuMonitor::getSystemInfo() << endl;

    cout << "5Ô∏è‚É£  THREAD SAFETY:" << endl;
    cout << "   ‚Ä¢ Utilisation d'atomic<> et mutex" << endl;
    cout << "   ‚Ä¢ Gestion s√©curis√©e des threads" << endl;
    
    cout << "\n‚ú® D√©monstration POO termin√©e!" << endl;
}

// Fonction pour valider l'entr√©e utilisateur
int getValidInput(int min, int max) {
    int choice;
    while (true) {
        if (cin >> choice) {
            if (choice >= min && choice <= max) {
                return choice;
            } else {
                cout << "‚ùå Choix invalide! Veuillez choisir entre " << min << " et " << max << ": ";
            }
        } else {
            cout << "‚ùå Entr√©e invalide! Veuillez saisir un nombre: ";
            cin.clear();
            cin.ignore(numeric_limits<streamsize>::max(), '\n');
        }
    }
}

// Fonction pour obtenir un nom de fichier valide
string getValidFilename() {
    string filename;
    cout << "üìÅ Nom du fichier (avec extension): ";
    cin >> filename;
    
    // Ajouter extension par d√©faut si absente
    if (filename.find('.') == string::npos) {
        filename += ".txt";
        cout << "üìù Extension .txt ajout√©e automatiquement" << endl;
    }
    
    return filename;
}

int main() {
    // Configurer le gestionnaire de signal
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);

    cout << "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" << endl;
    cout << "‚ïë            BIENVENUE DANS CPU MONITOR          ‚ïë" << endl;
    cout << "‚ïë        Projet C++ - Programmation POO         ‚ïë" << endl;
    cout << "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" << endl;

    // Cr√©er l'objet principal avec intervalle par d√©faut
    CpuMonitor cpuMonitor(2);
    
    // Faire une premi√®re mesure pour initialiser
    cpuMonitor.updateCpuUsage();

    int choice;
    string filename;
    int interval;

    do {
        displayMenu();
        choice = getValidInput(0, 9);

        switch (choice) {
            case 1:
                realTimeMonitoring(cpuMonitor);
                keepRunning = true;  // R√©initialiser pour le menu
                break;

            case 2:
                cpuMonitor.displayCpuInfo();
                break;

            case 3:
                cout << "\nüîç Mesure unique en cours..." << endl;
                cpuMonitor.updateCpuUsage();
                cout << cpuMonitor.formatUsageString() << endl;
                cout << "üí° Utilisation actuelle: " << cpuMonitor.getCurrentUsage() << "%" << endl;
                break;

            case 4:
                cout << "\n‚öôÔ∏è  Nouvel intervalle (1-60 secondes): ";
                interval = getValidInput(1, 60);
                cpuMonitor.setUpdateInterval(interval);
                break;

            case 5:
                filename = getValidFilename();
                cpuMonitor.updateCpuUsage();  // Mise √† jour avant export
                cpuMonitor.exportToFile(filename);
                break;

            case 6:
                cpuMonitor.printUsageHistory();
                break;

            case 7:
                cout << "\n" << CpuMonitor::getSystemInfo() << endl;
                break;

            case 8: {
                cout << "\nüöÄ Dur√©e du test de charge (1-10 secondes): ";
                int duration = getValidInput(1, 10);
                
                cout << "\n‚ö†Ô∏è  ATTENTION: Ce test va charger votre CPU!" << endl;
                cout << "Voulez-vous continuer? (1=Oui, 0=Non): ";
                int confirm = getValidInput(0, 1);
                
                if (confirm == 1) {
                    stressTest(duration);
                } else {
                    cout << "Test annul√©." << endl;
                }
                break;
            }

            case 9:
                demonstrateOOP();
                break;

            case 0:
                cout << "\nüëã Merci d'avoir utilis√© CPU Monitor!" << endl;
                cout << "Au revoir! üöÄ" << endl;
                break;

            default:
                cout << "‚ùå Choix invalide!" << endl;
        }
        
        // Pause avant retour au menu (sauf pour surveillance temps r√©el et quitter)
        if (choice != 0 && choice != 1) {
            cout << "\nüì± Appuyez sur Entr√©e pour continuer...";
            cin.ignore();
            cin.get();
        }

    } while (choice != 0);

    return 0;
}